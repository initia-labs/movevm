# This image is used for two things (which is not ideal, but yeah):
# 1. Build the static Rust library
# 2. Execute Go tests that use and test this library
# For 2. we define the Go image here. For 1. we install Rust below.
FROM golang:1.22-alpine

ENV RUSTUP_HOME=/usr/local/rustup \
    CARGO_HOME=/usr/local/cargo \
    PATH=/opt/aarch64-linux-musl-cross/bin:/usr/local/cargo/bin:$PATH

# this comes from standard alpine nightly file
#  https://github.com/rust-lang/docker-rust-nightly/blob/master/alpine3.12/Dockerfile
# with some changes to support our toolchain, etc
RUN set -eux \
    && apk add --no-cache ca-certificates build-base pkgconfig perl linux-headers

RUN wget "https://static.rust-lang.org/rustup/dist/x86_64-unknown-linux-musl/rustup-init" \
  && chmod +x rustup-init \
  && ./rustup-init -y --no-modify-path --profile minimal --default-toolchain 1.77.1 \
  && rm rustup-init \
  && chmod -R a+w $RUSTUP_HOME $CARGO_HOME

# Install C compiler for cross-compilation. This is required by
# Wasmer in https://github.com/wasmerio/wasmer/blob/2.2.1/lib/vm/build.rs.
# For newer versions this might not be needed anymore since build.rs is removed
# in https://github.com/wasmerio/wasmer/pull/2807.
#
# https://unix.stackexchange.com/questions/620205/aarch64-linux-musl-cross-has-a-broken-link-for-ld-musl-aarch64-so-1
RUN wget https://musl.cc/aarch64-linux-musl-cross.tgz \
  && tar -xf aarch64-linux-musl-cross.tgz \
  && mv ./aarch64-linux-musl-cross /opt \
  && /opt/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc --version \
  && rm aarch64-linux-musl-cross.tgz

#############
## OPENSSL ##
#############

RUN wget "https://www.openssl.org/source/openssl-1.1.1k.tar.gz"

# Install openssl for x86_64. This is required by Move
RUN tar -zxvf ./openssl-1.1.1k.tar.gz \
  && cd openssl-1.1.1k \
  && INSTALL_DIR="/opt/x86_64-openssl" \
  && INCLUDE_DIR="$INSTALL_DIR/include" \
  && LIB_DIR="INSTALL_DIR/lib" \
  && CPPFLAGS="--static -static -I$INCLUDE_DIR" \
  && LDFLAGS="--static -static -Wl,--no-as-needed -L$INCLUDE_DIR -lpthread -pthread" \
  && ./Configure linux-x86_64 --prefix="$INSTALL_DIR" threads no-shared no-dso no-comp CPPFLAGS="$CPPFLAGS" LDFLAGS="$LDFLAGS" \
  && make -j$(nproc) \
  && make install_sw \
  && cd .. \
  && rm -rf ./openssl-1.1.1k

# Install openssl for cross-compilation. This is required by Move
RUN tar -zxvf ./openssl-1.1.1k.tar.gz \
  && cd openssl-1.1.1k \
  && INSTALL_DIR="/opt/aarch64-openssl" \
  && INCLUDE_DIR="$INSTALL_DIR/include" \
  && LIB_DIR="INSTALL_DIR/lib" \
  && CPPFLAGS="--static -static -I$INCLUDE_DIR" \
  && LDFLAGS="--static -static -Wl,--no-as-needed -L$INCLUDE_DIR -lpthread -pthread" \
  && ./Configure linux-aarch64 --cross-compile-prefix=aarch64-linux-musl- --prefix="$INSTALL_DIR" threads no-shared no-dso no-comp CPPFLAGS="$CPPFLAGS" LDFLAGS="$LDFLAGS" \
  && make -j$(nproc) \
  && make install_sw \
  && cd .. \
  && rm -rf ./openssl-1.1.1k

RUN rm ./openssl-1.1.1k.tar.gz

# prepare go cache dirs
RUN mkdir -p /.cache/go-build
RUN chmod -R 777 /.cache

# allow non-root user to download more deps later
RUN chmod -R 777 /usr/local/cargo

## COPY BUILD SCRIPTS
WORKDIR /code

# Add musl Rust targets
RUN rustup target add aarch64-unknown-linux-musl x86_64-unknown-linux-musl

COPY guest/*.sh /opt/
RUN chmod +x /opt/*.sh

RUN mkdir /.cargo
RUN chmod +rx /.cargo
COPY guest/cargo-config /.cargo/config

WORKDIR /code
CMD ["/opt/build_muslc.sh"]
