use std::{env::current_dir, fs::File};

use serde_generate::{golang::CodeGenerator, CodeGeneratorConfig, Encoding};
use serde_reflection::{Samples, Tracer, TracerConfig};

use initia_move_types::{
    account::Account,
    compiler::{
        CompilerArguments, CompilerBuildConfig, CompilerCoverageBytecodeOptions,
        CompilerCoverageSourceOptions, CompilerCoverageSummaryOptions, CompilerDocgenOptions,
        CompilerTestOptions,
    },
    cosmos::CosmosMessage,
    entry_function::EntryFunction,
    env::Env,
    gas_usage::GasUsage,
    module::ModuleBundle,
    result::ExecutionResult,
    script::Script,
    staking_change_set::StakingDelta,
    table::TableInfo,
    view_function::{ViewFunction, ViewOutput},
    vm_config::InitiaVMConfig,
};
use move_core_types::language_storage::{ModuleId, ResourceKey, TypeTag};

fn main() {
    let mut tracer = Tracer::new(TracerConfig::default());

    // 1. Record samples for types with custom deserializers.
    let samples = Samples::new();

    // 2. Trace the main entry point(s) + every enum separately.
    tracer.trace_type::<TypeTag>(&samples).unwrap();
    tracer.trace_type::<ModuleId>(&samples).unwrap();
    tracer.trace_type::<ResourceKey>(&samples).unwrap();
    tracer.trace_type::<StakingDelta>(&samples).unwrap();
    tracer.trace_type::<CosmosMessage>(&samples).unwrap();
    tracer.trace_type::<Account>(&samples).unwrap();
    tracer.trace_type::<GasUsage>(&samples).unwrap();
    tracer.trace_type::<ExecutionResult>(&samples).unwrap();
    tracer.trace_type::<EntryFunction>(&samples).unwrap();
    tracer.trace_type::<ViewFunction>(&samples).unwrap();
    tracer.trace_type::<ViewOutput>(&samples).unwrap();
    tracer.trace_type::<ModuleBundle>(&samples).unwrap();
    tracer.trace_type::<Script>(&samples).unwrap();
    tracer.trace_type::<Env>(&samples).unwrap();
    tracer.trace_type::<TableInfo>(&samples).unwrap();
    tracer.trace_type::<InitiaVMConfig>(&samples).unwrap();
    tracer.trace_type::<CompilerArguments>(&samples).unwrap();
    tracer.trace_type::<CompilerBuildConfig>(&samples).unwrap();
    tracer
        .trace_type::<CompilerCoverageBytecodeOptions>(&samples)
        .unwrap();
    tracer
        .trace_type::<CompilerCoverageSourceOptions>(&samples)
        .unwrap();
    tracer
        .trace_type::<CompilerCoverageSummaryOptions>(&samples)
        .unwrap();
    tracer
        .trace_type::<CompilerDocgenOptions>(&samples)
        .unwrap();
    tracer.trace_type::<CompilerTestOptions>(&samples).unwrap();

    // aliases within StructTag
    tracer
        .ignore_aliases("StructTag", &["type_params"])
        .unwrap();

    let registry = tracer.registry().unwrap();

    let root = current_dir().unwrap();
    let buffer = File::create(root.join("types/bcs.go")).unwrap();

    // Create class definitions in Go
    // CodeGenerator doesn't have function to put headline comments.. so we have to use this tricky method.
    let config = CodeGeneratorConfig::new("types\n\n//\n// *DO NOT MODIFY THIS FILE!*\n// This is auto-generated by generate-bcs-go.\n//".to_string())
        .with_encodings(vec![Encoding::Bcs]);
    let generator = CodeGenerator::new(&config);
    generator.output(&mut &buffer, &registry).unwrap();
}
