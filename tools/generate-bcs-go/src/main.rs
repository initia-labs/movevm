use std::{env::current_dir, fs::File};

use serde_generate::{golang::CodeGenerator, CodeGeneratorConfig, Encoding};
use serde_reflection::{Tracer, TracerConfig};

use initia_move_types::{
    account::Account,
    compiler::{
        CompilerArguments, CompilerBuildConfig, CompilerCoverageBytecodeOptions,
        CompilerCoverageSourceOptions, CompilerCoverageSummaryOptions, CompilerDocgenOptions,
        CompilerTestOptions,
    },
    cosmos::CosmosMessage,
    entry_function::EntryFunction,
    env::Env,
    gas_usage::GasUsage,
    module::ModuleBundle,
    result::ExecutionResult,
    script::Script,
    staking_change_set::StakingDelta,
    table::TableInfo,
    view_function::{ViewFunction, ViewOutput},
    vm_config::InitiaVMConfig,
};
use move_core_types::{
    account_address::AccountAddress,
    identifier::Identifier,
    language_storage::{ModuleId, ResourceKey, StructTag, TypeTag},
};

fn main() {
    let mut tracer = Tracer::new(TracerConfig::default());
    tracer.trace_simple_type::<Identifier>().unwrap();
    tracer.trace_simple_type::<AccountAddress>().unwrap();
    tracer.trace_simple_type::<StructTag>().unwrap();
    tracer.trace_simple_type::<TypeTag>().unwrap();
    tracer.trace_simple_type::<ModuleId>().unwrap();
    tracer.trace_simple_type::<ResourceKey>().unwrap();
    tracer.trace_simple_type::<StakingDelta>().unwrap();
    tracer.trace_simple_type::<CosmosMessage>().unwrap();
    tracer.trace_simple_type::<Account>().unwrap();
    tracer.trace_simple_type::<GasUsage>().unwrap();
    tracer.trace_simple_type::<ExecutionResult>().unwrap();
    tracer.trace_simple_type::<EntryFunction>().unwrap();
    tracer.trace_simple_type::<ViewFunction>().unwrap();
    tracer.trace_simple_type::<ViewOutput>().unwrap();
    tracer.trace_simple_type::<ModuleBundle>().unwrap();
    tracer.trace_simple_type::<Script>().unwrap();
    tracer.trace_simple_type::<Env>().unwrap();
    tracer.trace_simple_type::<TableInfo>().unwrap();
    tracer.trace_simple_type::<InitiaVMConfig>().unwrap();
    tracer.trace_simple_type::<CompilerArguments>().unwrap();
    tracer.trace_simple_type::<CompilerBuildConfig>().unwrap();
    tracer
        .trace_simple_type::<CompilerCoverageBytecodeOptions>()
        .unwrap();
    tracer
        .trace_simple_type::<CompilerCoverageSourceOptions>()
        .unwrap();
    tracer
        .trace_simple_type::<CompilerCoverageSummaryOptions>()
        .unwrap();
    tracer.trace_simple_type::<CompilerDocgenOptions>().unwrap();
    tracer.trace_simple_type::<CompilerTestOptions>().unwrap();

    // aliases within StructTag
    tracer
        .ignore_aliases("StructTag", &["type_params"])
        .unwrap();

    let registry = tracer.registry().unwrap();

    let root = current_dir().unwrap();
    let buffer = File::create(root.join("types/bcs.go")).unwrap();

    // Create class definitions in Go
    // CodeGenerator doesn't have function to put headline comments.. so we have to use this tricky method.
    let config = CodeGeneratorConfig::new("types\n\n//\n// *DO NOT MODIFY THIS FILE!*\n// This is auto-generated by generate-bcs-go.\n//".to_string())
        .with_encodings(vec![Encoding::Bcs]);
    let generator = CodeGenerator::new(&config);
    generator.output(&mut &buffer, &registry).unwrap();
}
