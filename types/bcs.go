package types

//
// *DO NOT MODIFY THIS FILE!*
// This is auto-generated by generate-bcs-go.
//


import (
	"fmt"
	"github.com/aptos-labs/serde-reflection/serde-generate/runtime/golang/serde"
	"github.com/aptos-labs/serde-reflection/serde-generate/runtime/golang/bcs"
)


type Account struct {
	Address AccountAddress
	AccountNumber uint64
	AccountType uint8
}

func (obj *Account) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := obj.Address.Serialize(serializer); err != nil { return err }
	if err := serializer.SerializeU64(obj.AccountNumber); err != nil { return err }
	if err := serializer.SerializeU8(obj.AccountType); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *Account) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeAccount(deserializer serde.Deserializer) (Account, error) {
	var obj Account
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.Address = val } else { return obj, err }
	if val, err := deserializer.DeserializeU64(); err == nil { obj.AccountNumber = val } else { return obj, err }
	if val, err := deserializer.DeserializeU8(); err == nil { obj.AccountType = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeAccount(input []byte) (Account, error) {
	if input == nil {
		var obj Account
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeAccount(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type AccountAddress [32]uint8

func (obj *AccountAddress) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serialize_array32_u8_array((([32]uint8)(*obj)), serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *AccountAddress) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeAccountAddress(deserializer serde.Deserializer) (AccountAddress, error) {
	var obj [32]uint8
	if err := deserializer.IncreaseContainerDepth(); err != nil { return (AccountAddress)(obj), err }
	if val, err := deserialize_array32_u8_array(deserializer); err == nil { obj = val } else { return ((AccountAddress)(obj)), err }
	deserializer.DecreaseContainerDepth()
	return (AccountAddress)(obj), nil
}

func BcsDeserializeAccountAddress(input []byte) (AccountAddress, error) {
	if input == nil {
		var obj AccountAddress
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeAccountAddress(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type CompilerArguments struct {
	PackagePath *string
	Verbose bool
	BuildConfig CompilerBuildConfig
}

func (obj *CompilerArguments) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serialize_option_str(obj.PackagePath, serializer); err != nil { return err }
	if err := serializer.SerializeBool(obj.Verbose); err != nil { return err }
	if err := obj.BuildConfig.Serialize(serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *CompilerArguments) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeCompilerArguments(deserializer serde.Deserializer) (CompilerArguments, error) {
	var obj CompilerArguments
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserialize_option_str(deserializer); err == nil { obj.PackagePath = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.Verbose = val } else { return obj, err }
	if val, err := DeserializeCompilerBuildConfig(deserializer); err == nil { obj.BuildConfig = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeCompilerArguments(input []byte) (CompilerArguments, error) {
	if input == nil {
		var obj CompilerArguments
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeCompilerArguments(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type CompilerBuildConfig struct {
	DevMode bool
	TestMode bool
	GenerateDocs bool
	GenerateAbis bool
	InstallDir *string
	ForceRecompilation bool
	FetchDepsOnly bool
	SkipFetchLatestGitDeps bool
	BytecodeVersion uint32
	CompilerVersion uint32
	LanguageVersion uint32
	AdditionalNamedAddresses []struct {Field0 string; Field1 AccountAddress}
}

func (obj *CompilerBuildConfig) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serializer.SerializeBool(obj.DevMode); err != nil { return err }
	if err := serializer.SerializeBool(obj.TestMode); err != nil { return err }
	if err := serializer.SerializeBool(obj.GenerateDocs); err != nil { return err }
	if err := serializer.SerializeBool(obj.GenerateAbis); err != nil { return err }
	if err := serialize_option_str(obj.InstallDir, serializer); err != nil { return err }
	if err := serializer.SerializeBool(obj.ForceRecompilation); err != nil { return err }
	if err := serializer.SerializeBool(obj.FetchDepsOnly); err != nil { return err }
	if err := serializer.SerializeBool(obj.SkipFetchLatestGitDeps); err != nil { return err }
	if err := serializer.SerializeU32(obj.BytecodeVersion); err != nil { return err }
	if err := serializer.SerializeU32(obj.CompilerVersion); err != nil { return err }
	if err := serializer.SerializeU32(obj.LanguageVersion); err != nil { return err }
	if err := serialize_vector_tuple2_str_AccountAddress(obj.AdditionalNamedAddresses, serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *CompilerBuildConfig) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeCompilerBuildConfig(deserializer serde.Deserializer) (CompilerBuildConfig, error) {
	var obj CompilerBuildConfig
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.DevMode = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.TestMode = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.GenerateDocs = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.GenerateAbis = val } else { return obj, err }
	if val, err := deserialize_option_str(deserializer); err == nil { obj.InstallDir = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.ForceRecompilation = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.FetchDepsOnly = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.SkipFetchLatestGitDeps = val } else { return obj, err }
	if val, err := deserializer.DeserializeU32(); err == nil { obj.BytecodeVersion = val } else { return obj, err }
	if val, err := deserializer.DeserializeU32(); err == nil { obj.CompilerVersion = val } else { return obj, err }
	if val, err := deserializer.DeserializeU32(); err == nil { obj.LanguageVersion = val } else { return obj, err }
	if val, err := deserialize_vector_tuple2_str_AccountAddress(deserializer); err == nil { obj.AdditionalNamedAddresses = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeCompilerBuildConfig(input []byte) (CompilerBuildConfig, error) {
	if input == nil {
		var obj CompilerBuildConfig
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeCompilerBuildConfig(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type CompilerCoverageBytecodeOptions struct {
	ModuleName *string
}

func (obj *CompilerCoverageBytecodeOptions) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serialize_option_str(obj.ModuleName, serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *CompilerCoverageBytecodeOptions) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeCompilerCoverageBytecodeOptions(deserializer serde.Deserializer) (CompilerCoverageBytecodeOptions, error) {
	var obj CompilerCoverageBytecodeOptions
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserialize_option_str(deserializer); err == nil { obj.ModuleName = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeCompilerCoverageBytecodeOptions(input []byte) (CompilerCoverageBytecodeOptions, error) {
	if input == nil {
		var obj CompilerCoverageBytecodeOptions
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeCompilerCoverageBytecodeOptions(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type CompilerCoverageSourceOptions struct {
	ModuleName *string
}

func (obj *CompilerCoverageSourceOptions) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serialize_option_str(obj.ModuleName, serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *CompilerCoverageSourceOptions) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeCompilerCoverageSourceOptions(deserializer serde.Deserializer) (CompilerCoverageSourceOptions, error) {
	var obj CompilerCoverageSourceOptions
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserialize_option_str(deserializer); err == nil { obj.ModuleName = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeCompilerCoverageSourceOptions(input []byte) (CompilerCoverageSourceOptions, error) {
	if input == nil {
		var obj CompilerCoverageSourceOptions
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeCompilerCoverageSourceOptions(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type CompilerCoverageSummaryOptions struct {
	Functions bool
	OutputCsv bool
}

func (obj *CompilerCoverageSummaryOptions) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serializer.SerializeBool(obj.Functions); err != nil { return err }
	if err := serializer.SerializeBool(obj.OutputCsv); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *CompilerCoverageSummaryOptions) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeCompilerCoverageSummaryOptions(deserializer serde.Deserializer) (CompilerCoverageSummaryOptions, error) {
	var obj CompilerCoverageSummaryOptions
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.Functions = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.OutputCsv = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeCompilerCoverageSummaryOptions(input []byte) (CompilerCoverageSummaryOptions, error) {
	if input == nil {
		var obj CompilerCoverageSummaryOptions
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeCompilerCoverageSummaryOptions(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type CompilerDocgenOptions struct {
	IncludeImpl bool
	IncludeSpecs bool
	SpecsInlined bool
	IncludeDepDiagram bool
	CollapsedSections bool
	LandingPageTemplate *string
	ReferencesFile *string
}

func (obj *CompilerDocgenOptions) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serializer.SerializeBool(obj.IncludeImpl); err != nil { return err }
	if err := serializer.SerializeBool(obj.IncludeSpecs); err != nil { return err }
	if err := serializer.SerializeBool(obj.SpecsInlined); err != nil { return err }
	if err := serializer.SerializeBool(obj.IncludeDepDiagram); err != nil { return err }
	if err := serializer.SerializeBool(obj.CollapsedSections); err != nil { return err }
	if err := serialize_option_str(obj.LandingPageTemplate, serializer); err != nil { return err }
	if err := serialize_option_str(obj.ReferencesFile, serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *CompilerDocgenOptions) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeCompilerDocgenOptions(deserializer serde.Deserializer) (CompilerDocgenOptions, error) {
	var obj CompilerDocgenOptions
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.IncludeImpl = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.IncludeSpecs = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.SpecsInlined = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.IncludeDepDiagram = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.CollapsedSections = val } else { return obj, err }
	if val, err := deserialize_option_str(deserializer); err == nil { obj.LandingPageTemplate = val } else { return obj, err }
	if val, err := deserialize_option_str(deserializer); err == nil { obj.ReferencesFile = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeCompilerDocgenOptions(input []byte) (CompilerDocgenOptions, error) {
	if input == nil {
		var obj CompilerDocgenOptions
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeCompilerDocgenOptions(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type CompilerTestOptions struct {
	Filter *string
	ReportStatistics bool
	ReportStorageOnError bool
	IgnoreCompileWarnings bool
	ComputeCoverage bool
}

func (obj *CompilerTestOptions) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serialize_option_str(obj.Filter, serializer); err != nil { return err }
	if err := serializer.SerializeBool(obj.ReportStatistics); err != nil { return err }
	if err := serializer.SerializeBool(obj.ReportStorageOnError); err != nil { return err }
	if err := serializer.SerializeBool(obj.IgnoreCompileWarnings); err != nil { return err }
	if err := serializer.SerializeBool(obj.ComputeCoverage); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *CompilerTestOptions) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeCompilerTestOptions(deserializer serde.Deserializer) (CompilerTestOptions, error) {
	var obj CompilerTestOptions
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserialize_option_str(deserializer); err == nil { obj.Filter = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.ReportStatistics = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.ReportStorageOnError = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.IgnoreCompileWarnings = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.ComputeCoverage = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeCompilerTestOptions(input []byte) (CompilerTestOptions, error) {
	if input == nil {
		var obj CompilerTestOptions
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeCompilerTestOptions(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type CosmosCoin struct {
	Metadata AccountAddress
	Amount uint64
}

func (obj *CosmosCoin) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := obj.Metadata.Serialize(serializer); err != nil { return err }
	if err := serializer.SerializeU64(obj.Amount); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *CosmosCoin) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeCosmosCoin(deserializer serde.Deserializer) (CosmosCoin, error) {
	var obj CosmosCoin
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.Metadata = val } else { return obj, err }
	if val, err := deserializer.DeserializeU64(); err == nil { obj.Amount = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeCosmosCoin(input []byte) (CosmosCoin, error) {
	if input == nil {
		var obj CosmosCoin
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeCosmosCoin(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type CosmosMessage interface {
	isCosmosMessage()
	Serialize(serializer serde.Serializer) error
	BcsSerialize() ([]byte, error)
}

func DeserializeCosmosMessage(deserializer serde.Deserializer) (CosmosMessage, error) {
	index, err := deserializer.DeserializeVariantIndex()
	if err != nil { return nil, err }

	switch index {
	case 0:
		if val, err := load_CosmosMessage__Move(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 1:
		if val, err := load_CosmosMessage__Staking(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 2:
		if val, err := load_CosmosMessage__Distribution(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 3:
		if val, err := load_CosmosMessage__Ibc(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 4:
		if val, err := load_CosmosMessage__Stargate(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	default:
		return nil, fmt.Errorf("Unknown variant index for CosmosMessage: %d", index)
	}
}

func BcsDeserializeCosmosMessage(input []byte) (CosmosMessage, error) {
	if input == nil {
		var obj CosmosMessage
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeCosmosMessage(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type CosmosMessage__Move struct {
	Value MoveMessage
}

func (*CosmosMessage__Move) isCosmosMessage() {}

func (obj *CosmosMessage__Move) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(0)
	if err := obj.Value.Serialize(serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *CosmosMessage__Move) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_CosmosMessage__Move(deserializer serde.Deserializer) (CosmosMessage__Move, error) {
	var obj CosmosMessage__Move
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeMoveMessage(deserializer); err == nil { obj.Value = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type CosmosMessage__Staking struct {
	Value StakingMessage
}

func (*CosmosMessage__Staking) isCosmosMessage() {}

func (obj *CosmosMessage__Staking) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(1)
	if err := obj.Value.Serialize(serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *CosmosMessage__Staking) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_CosmosMessage__Staking(deserializer serde.Deserializer) (CosmosMessage__Staking, error) {
	var obj CosmosMessage__Staking
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeStakingMessage(deserializer); err == nil { obj.Value = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type CosmosMessage__Distribution struct {
	Value DistributionMessage
}

func (*CosmosMessage__Distribution) isCosmosMessage() {}

func (obj *CosmosMessage__Distribution) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(2)
	if err := obj.Value.Serialize(serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *CosmosMessage__Distribution) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_CosmosMessage__Distribution(deserializer serde.Deserializer) (CosmosMessage__Distribution, error) {
	var obj CosmosMessage__Distribution
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeDistributionMessage(deserializer); err == nil { obj.Value = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type CosmosMessage__Ibc struct {
	Value IBCMessage
}

func (*CosmosMessage__Ibc) isCosmosMessage() {}

func (obj *CosmosMessage__Ibc) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(3)
	if err := obj.Value.Serialize(serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *CosmosMessage__Ibc) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_CosmosMessage__Ibc(deserializer serde.Deserializer) (CosmosMessage__Ibc, error) {
	var obj CosmosMessage__Ibc
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeIBCMessage(deserializer); err == nil { obj.Value = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type CosmosMessage__Stargate struct {
	Value StargateMessage
}

func (*CosmosMessage__Stargate) isCosmosMessage() {}

func (obj *CosmosMessage__Stargate) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(4)
	if err := obj.Value.Serialize(serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *CosmosMessage__Stargate) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_CosmosMessage__Stargate(deserializer serde.Deserializer) (CosmosMessage__Stargate, error) {
	var obj CosmosMessage__Stargate
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeStargateMessage(deserializer); err == nil { obj.Value = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type DistributionMessage interface {
	isDistributionMessage()
	Serialize(serializer serde.Serializer) error
	BcsSerialize() ([]byte, error)
}

func DeserializeDistributionMessage(deserializer serde.Deserializer) (DistributionMessage, error) {
	index, err := deserializer.DeserializeVariantIndex()
	if err != nil { return nil, err }

	switch index {
	case 0:
		if val, err := load_DistributionMessage__FundCommunityPool(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	default:
		return nil, fmt.Errorf("Unknown variant index for DistributionMessage: %d", index)
	}
}

func BcsDeserializeDistributionMessage(input []byte) (DistributionMessage, error) {
	if input == nil {
		var obj DistributionMessage
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeDistributionMessage(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type DistributionMessage__FundCommunityPool struct {
	SenderAddress AccountAddress
	Amount CosmosCoin
}

func (*DistributionMessage__FundCommunityPool) isDistributionMessage() {}

func (obj *DistributionMessage__FundCommunityPool) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(0)
	if err := obj.SenderAddress.Serialize(serializer); err != nil { return err }
	if err := obj.Amount.Serialize(serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *DistributionMessage__FundCommunityPool) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_DistributionMessage__FundCommunityPool(deserializer serde.Deserializer) (DistributionMessage__FundCommunityPool, error) {
	var obj DistributionMessage__FundCommunityPool
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.SenderAddress = val } else { return obj, err }
	if val, err := DeserializeCosmosCoin(deserializer); err == nil { obj.Amount = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type EntryFunction struct {
	Module ModuleId
	Function Identifier
	TyArgs []TypeTag
	Args [][]byte
	IsJson bool
}

func (obj *EntryFunction) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := obj.Module.Serialize(serializer); err != nil { return err }
	if err := obj.Function.Serialize(serializer); err != nil { return err }
	if err := serialize_vector_TypeTag(obj.TyArgs, serializer); err != nil { return err }
	if err := serialize_vector_bytes(obj.Args, serializer); err != nil { return err }
	if err := serializer.SerializeBool(obj.IsJson); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *EntryFunction) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeEntryFunction(deserializer serde.Deserializer) (EntryFunction, error) {
	var obj EntryFunction
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeModuleId(deserializer); err == nil { obj.Module = val } else { return obj, err }
	if val, err := DeserializeIdentifier(deserializer); err == nil { obj.Function = val } else { return obj, err }
	if val, err := deserialize_vector_TypeTag(deserializer); err == nil { obj.TyArgs = val } else { return obj, err }
	if val, err := deserialize_vector_bytes(deserializer); err == nil { obj.Args = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.IsJson = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeEntryFunction(input []byte) (EntryFunction, error) {
	if input == nil {
		var obj EntryFunction
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeEntryFunction(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type Env struct {
	BlockHeight uint64
	BlockTimestamp uint64
	NextAccountNumber uint64
	TxHash [32]uint8
	SessionId [32]uint8
}

func (obj *Env) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serializer.SerializeU64(obj.BlockHeight); err != nil { return err }
	if err := serializer.SerializeU64(obj.BlockTimestamp); err != nil { return err }
	if err := serializer.SerializeU64(obj.NextAccountNumber); err != nil { return err }
	if err := serialize_array32_u8_array(obj.TxHash, serializer); err != nil { return err }
	if err := serialize_array32_u8_array(obj.SessionId, serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *Env) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeEnv(deserializer serde.Deserializer) (Env, error) {
	var obj Env
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserializer.DeserializeU64(); err == nil { obj.BlockHeight = val } else { return obj, err }
	if val, err := deserializer.DeserializeU64(); err == nil { obj.BlockTimestamp = val } else { return obj, err }
	if val, err := deserializer.DeserializeU64(); err == nil { obj.NextAccountNumber = val } else { return obj, err }
	if val, err := deserialize_array32_u8_array(deserializer); err == nil { obj.TxHash = val } else { return obj, err }
	if val, err := deserialize_array32_u8_array(deserializer); err == nil { obj.SessionId = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeEnv(input []byte) (Env, error) {
	if input == nil {
		var obj Env
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeEnv(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type ExecutionResult struct {
	Events []JsonEvent
	StakingDeltas []StakingDelta
	CosmosMessages []CosmosMessage
	NewAccounts []Account
	GasUsages []GasUsage
}

func (obj *ExecutionResult) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serialize_vector_JsonEvent(obj.Events, serializer); err != nil { return err }
	if err := serialize_vector_StakingDelta(obj.StakingDeltas, serializer); err != nil { return err }
	if err := serialize_vector_CosmosMessage(obj.CosmosMessages, serializer); err != nil { return err }
	if err := serialize_vector_Account(obj.NewAccounts, serializer); err != nil { return err }
	if err := serialize_vector_GasUsage(obj.GasUsages, serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *ExecutionResult) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeExecutionResult(deserializer serde.Deserializer) (ExecutionResult, error) {
	var obj ExecutionResult
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserialize_vector_JsonEvent(deserializer); err == nil { obj.Events = val } else { return obj, err }
	if val, err := deserialize_vector_StakingDelta(deserializer); err == nil { obj.StakingDeltas = val } else { return obj, err }
	if val, err := deserialize_vector_CosmosMessage(deserializer); err == nil { obj.CosmosMessages = val } else { return obj, err }
	if val, err := deserialize_vector_Account(deserializer); err == nil { obj.NewAccounts = val } else { return obj, err }
	if val, err := deserialize_vector_GasUsage(deserializer); err == nil { obj.GasUsages = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeExecutionResult(input []byte) (ExecutionResult, error) {
	if input == nil {
		var obj ExecutionResult
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeExecutionResult(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type GasUsage struct {
	ModuleId ModuleId
	GasUsed uint64
}

func (obj *GasUsage) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := obj.ModuleId.Serialize(serializer); err != nil { return err }
	if err := serializer.SerializeU64(obj.GasUsed); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *GasUsage) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeGasUsage(deserializer serde.Deserializer) (GasUsage, error) {
	var obj GasUsage
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeModuleId(deserializer); err == nil { obj.ModuleId = val } else { return obj, err }
	if val, err := deserializer.DeserializeU64(); err == nil { obj.GasUsed = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeGasUsage(input []byte) (GasUsage, error) {
	if input == nil {
		var obj GasUsage
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeGasUsage(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type IBCFee struct {
	RecvFee CosmosCoin
	AckFee CosmosCoin
	TimeoutFee CosmosCoin
}

func (obj *IBCFee) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := obj.RecvFee.Serialize(serializer); err != nil { return err }
	if err := obj.AckFee.Serialize(serializer); err != nil { return err }
	if err := obj.TimeoutFee.Serialize(serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *IBCFee) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeIBCFee(deserializer serde.Deserializer) (IBCFee, error) {
	var obj IBCFee
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeCosmosCoin(deserializer); err == nil { obj.RecvFee = val } else { return obj, err }
	if val, err := DeserializeCosmosCoin(deserializer); err == nil { obj.AckFee = val } else { return obj, err }
	if val, err := DeserializeCosmosCoin(deserializer); err == nil { obj.TimeoutFee = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeIBCFee(input []byte) (IBCFee, error) {
	if input == nil {
		var obj IBCFee
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeIBCFee(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type IBCHeight struct {
	RevisionNumber uint64
	RevisionHeight uint64
}

func (obj *IBCHeight) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serializer.SerializeU64(obj.RevisionNumber); err != nil { return err }
	if err := serializer.SerializeU64(obj.RevisionHeight); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *IBCHeight) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeIBCHeight(deserializer serde.Deserializer) (IBCHeight, error) {
	var obj IBCHeight
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserializer.DeserializeU64(); err == nil { obj.RevisionNumber = val } else { return obj, err }
	if val, err := deserializer.DeserializeU64(); err == nil { obj.RevisionHeight = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeIBCHeight(input []byte) (IBCHeight, error) {
	if input == nil {
		var obj IBCHeight
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeIBCHeight(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type IBCMessage interface {
	isIBCMessage()
	Serialize(serializer serde.Serializer) error
	BcsSerialize() ([]byte, error)
}

func DeserializeIBCMessage(deserializer serde.Deserializer) (IBCMessage, error) {
	index, err := deserializer.DeserializeVariantIndex()
	if err != nil { return nil, err }

	switch index {
	case 0:
		if val, err := load_IBCMessage__Transfer(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 1:
		if val, err := load_IBCMessage__NftTransfer(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 2:
		if val, err := load_IBCMessage__PayFee(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	default:
		return nil, fmt.Errorf("Unknown variant index for IBCMessage: %d", index)
	}
}

func BcsDeserializeIBCMessage(input []byte) (IBCMessage, error) {
	if input == nil {
		var obj IBCMessage
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeIBCMessage(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type IBCMessage__Transfer struct {
	SourcePort string
	SourceChannel string
	Token CosmosCoin
	Sender AccountAddress
	Receiver string
	TimeoutHeight IBCHeight
	TimeoutTimestamp uint64
	Memo string
}

func (*IBCMessage__Transfer) isIBCMessage() {}

func (obj *IBCMessage__Transfer) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(0)
	if err := serializer.SerializeStr(obj.SourcePort); err != nil { return err }
	if err := serializer.SerializeStr(obj.SourceChannel); err != nil { return err }
	if err := obj.Token.Serialize(serializer); err != nil { return err }
	if err := obj.Sender.Serialize(serializer); err != nil { return err }
	if err := serializer.SerializeStr(obj.Receiver); err != nil { return err }
	if err := obj.TimeoutHeight.Serialize(serializer); err != nil { return err }
	if err := serializer.SerializeU64(obj.TimeoutTimestamp); err != nil { return err }
	if err := serializer.SerializeStr(obj.Memo); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *IBCMessage__Transfer) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_IBCMessage__Transfer(deserializer serde.Deserializer) (IBCMessage__Transfer, error) {
	var obj IBCMessage__Transfer
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.SourcePort = val } else { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.SourceChannel = val } else { return obj, err }
	if val, err := DeserializeCosmosCoin(deserializer); err == nil { obj.Token = val } else { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.Sender = val } else { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.Receiver = val } else { return obj, err }
	if val, err := DeserializeIBCHeight(deserializer); err == nil { obj.TimeoutHeight = val } else { return obj, err }
	if val, err := deserializer.DeserializeU64(); err == nil { obj.TimeoutTimestamp = val } else { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.Memo = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type IBCMessage__NftTransfer struct {
	SourcePort string
	SourceChannel string
	Collection AccountAddress
	TokenIds []string
	Sender AccountAddress
	Receiver string
	TimeoutHeight IBCHeight
	TimeoutTimestamp uint64
	Memo string
}

func (*IBCMessage__NftTransfer) isIBCMessage() {}

func (obj *IBCMessage__NftTransfer) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(1)
	if err := serializer.SerializeStr(obj.SourcePort); err != nil { return err }
	if err := serializer.SerializeStr(obj.SourceChannel); err != nil { return err }
	if err := obj.Collection.Serialize(serializer); err != nil { return err }
	if err := serialize_vector_str(obj.TokenIds, serializer); err != nil { return err }
	if err := obj.Sender.Serialize(serializer); err != nil { return err }
	if err := serializer.SerializeStr(obj.Receiver); err != nil { return err }
	if err := obj.TimeoutHeight.Serialize(serializer); err != nil { return err }
	if err := serializer.SerializeU64(obj.TimeoutTimestamp); err != nil { return err }
	if err := serializer.SerializeStr(obj.Memo); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *IBCMessage__NftTransfer) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_IBCMessage__NftTransfer(deserializer serde.Deserializer) (IBCMessage__NftTransfer, error) {
	var obj IBCMessage__NftTransfer
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.SourcePort = val } else { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.SourceChannel = val } else { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.Collection = val } else { return obj, err }
	if val, err := deserialize_vector_str(deserializer); err == nil { obj.TokenIds = val } else { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.Sender = val } else { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.Receiver = val } else { return obj, err }
	if val, err := DeserializeIBCHeight(deserializer); err == nil { obj.TimeoutHeight = val } else { return obj, err }
	if val, err := deserializer.DeserializeU64(); err == nil { obj.TimeoutTimestamp = val } else { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.Memo = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type IBCMessage__PayFee struct {
	Fee IBCFee
	SourcePort string
	SourceChannel string
	Signer AccountAddress
}

func (*IBCMessage__PayFee) isIBCMessage() {}

func (obj *IBCMessage__PayFee) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(2)
	if err := obj.Fee.Serialize(serializer); err != nil { return err }
	if err := serializer.SerializeStr(obj.SourcePort); err != nil { return err }
	if err := serializer.SerializeStr(obj.SourceChannel); err != nil { return err }
	if err := obj.Signer.Serialize(serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *IBCMessage__PayFee) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_IBCMessage__PayFee(deserializer serde.Deserializer) (IBCMessage__PayFee, error) {
	var obj IBCMessage__PayFee
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeIBCFee(deserializer); err == nil { obj.Fee = val } else { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.SourcePort = val } else { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.SourceChannel = val } else { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.Signer = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type Identifier string

func (obj *Identifier) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serializer.SerializeStr(((string)(*obj))); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *Identifier) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeIdentifier(deserializer serde.Deserializer) (Identifier, error) {
	var obj string
	if err := deserializer.IncreaseContainerDepth(); err != nil { return (Identifier)(obj), err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj = val } else { return ((Identifier)(obj)), err }
	deserializer.DecreaseContainerDepth()
	return (Identifier)(obj), nil
}

func BcsDeserializeIdentifier(input []byte) (Identifier, error) {
	if input == nil {
		var obj Identifier
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeIdentifier(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type InitiaVMConfig struct {
	AllowUnstable bool
}

func (obj *InitiaVMConfig) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serializer.SerializeBool(obj.AllowUnstable); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *InitiaVMConfig) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeInitiaVMConfig(deserializer serde.Deserializer) (InitiaVMConfig, error) {
	var obj InitiaVMConfig
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.AllowUnstable = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeInitiaVMConfig(input []byte) (InitiaVMConfig, error) {
	if input == nil {
		var obj InitiaVMConfig
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeInitiaVMConfig(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type JsonEvent struct {
	TypeTag string
	EventData string
}

func (obj *JsonEvent) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serializer.SerializeStr(obj.TypeTag); err != nil { return err }
	if err := serializer.SerializeStr(obj.EventData); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *JsonEvent) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeJsonEvent(deserializer serde.Deserializer) (JsonEvent, error) {
	var obj JsonEvent
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.TypeTag = val } else { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.EventData = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeJsonEvent(input []byte) (JsonEvent, error) {
	if input == nil {
		var obj JsonEvent
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeJsonEvent(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type Module struct {
	Code []uint8
}

func (obj *Module) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serialize_vector_u8(obj.Code, serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *Module) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeModule(deserializer serde.Deserializer) (Module, error) {
	var obj Module
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserialize_vector_u8(deserializer); err == nil { obj.Code = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeModule(input []byte) (Module, error) {
	if input == nil {
		var obj Module
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeModule(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type ModuleBundle struct {
	Codes []Module
}

func (obj *ModuleBundle) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serialize_vector_Module(obj.Codes, serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *ModuleBundle) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeModuleBundle(deserializer serde.Deserializer) (ModuleBundle, error) {
	var obj ModuleBundle
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserialize_vector_Module(deserializer); err == nil { obj.Codes = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeModuleBundle(input []byte) (ModuleBundle, error) {
	if input == nil {
		var obj ModuleBundle
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeModuleBundle(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type ModuleId struct {
	Address AccountAddress
	Name Identifier
}

func (obj *ModuleId) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := obj.Address.Serialize(serializer); err != nil { return err }
	if err := obj.Name.Serialize(serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *ModuleId) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeModuleId(deserializer serde.Deserializer) (ModuleId, error) {
	var obj ModuleId
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.Address = val } else { return obj, err }
	if val, err := DeserializeIdentifier(deserializer); err == nil { obj.Name = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeModuleId(input []byte) (ModuleId, error) {
	if input == nil {
		var obj ModuleId
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeModuleId(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type MoveMessage interface {
	isMoveMessage()
	Serialize(serializer serde.Serializer) error
	BcsSerialize() ([]byte, error)
}

func DeserializeMoveMessage(deserializer serde.Deserializer) (MoveMessage, error) {
	index, err := deserializer.DeserializeVariantIndex()
	if err != nil { return nil, err }

	switch index {
	case 0:
		if val, err := load_MoveMessage__Execute(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 1:
		if val, err := load_MoveMessage__Script(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	default:
		return nil, fmt.Errorf("Unknown variant index for MoveMessage: %d", index)
	}
}

func BcsDeserializeMoveMessage(input []byte) (MoveMessage, error) {
	if input == nil {
		var obj MoveMessage
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeMoveMessage(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type MoveMessage__Execute struct {
	Sender AccountAddress
	ModuleAddress AccountAddress
	ModuleName string
	FunctionName string
	TypeArgs []string
	Args [][]uint8
	IsJson bool
}

func (*MoveMessage__Execute) isMoveMessage() {}

func (obj *MoveMessage__Execute) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(0)
	if err := obj.Sender.Serialize(serializer); err != nil { return err }
	if err := obj.ModuleAddress.Serialize(serializer); err != nil { return err }
	if err := serializer.SerializeStr(obj.ModuleName); err != nil { return err }
	if err := serializer.SerializeStr(obj.FunctionName); err != nil { return err }
	if err := serialize_vector_str(obj.TypeArgs, serializer); err != nil { return err }
	if err := serialize_vector_vector_u8(obj.Args, serializer); err != nil { return err }
	if err := serializer.SerializeBool(obj.IsJson); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *MoveMessage__Execute) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_MoveMessage__Execute(deserializer serde.Deserializer) (MoveMessage__Execute, error) {
	var obj MoveMessage__Execute
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.Sender = val } else { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.ModuleAddress = val } else { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.ModuleName = val } else { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.FunctionName = val } else { return obj, err }
	if val, err := deserialize_vector_str(deserializer); err == nil { obj.TypeArgs = val } else { return obj, err }
	if val, err := deserialize_vector_vector_u8(deserializer); err == nil { obj.Args = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.IsJson = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type MoveMessage__Script struct {
	Sender AccountAddress
	CodeBytes []uint8
	TypeArgs []string
	Args [][]uint8
	IsJson bool
}

func (*MoveMessage__Script) isMoveMessage() {}

func (obj *MoveMessage__Script) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(1)
	if err := obj.Sender.Serialize(serializer); err != nil { return err }
	if err := serialize_vector_u8(obj.CodeBytes, serializer); err != nil { return err }
	if err := serialize_vector_str(obj.TypeArgs, serializer); err != nil { return err }
	if err := serialize_vector_vector_u8(obj.Args, serializer); err != nil { return err }
	if err := serializer.SerializeBool(obj.IsJson); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *MoveMessage__Script) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_MoveMessage__Script(deserializer serde.Deserializer) (MoveMessage__Script, error) {
	var obj MoveMessage__Script
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.Sender = val } else { return obj, err }
	if val, err := deserialize_vector_u8(deserializer); err == nil { obj.CodeBytes = val } else { return obj, err }
	if val, err := deserialize_vector_str(deserializer); err == nil { obj.TypeArgs = val } else { return obj, err }
	if val, err := deserialize_vector_vector_u8(deserializer); err == nil { obj.Args = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.IsJson = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type ResourceKey struct {
	Address AccountAddress
	Type StructTag
}

func (obj *ResourceKey) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := obj.Address.Serialize(serializer); err != nil { return err }
	if err := obj.Type.Serialize(serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *ResourceKey) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeResourceKey(deserializer serde.Deserializer) (ResourceKey, error) {
	var obj ResourceKey
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.Address = val } else { return obj, err }
	if val, err := DeserializeStructTag(deserializer); err == nil { obj.Type = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeResourceKey(input []byte) (ResourceKey, error) {
	if input == nil {
		var obj ResourceKey
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeResourceKey(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type Script struct {
	Code []byte
	TyArgs []TypeTag
	Args [][]byte
	IsJson bool
}

func (obj *Script) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serializer.SerializeBytes(obj.Code); err != nil { return err }
	if err := serialize_vector_TypeTag(obj.TyArgs, serializer); err != nil { return err }
	if err := serialize_vector_bytes(obj.Args, serializer); err != nil { return err }
	if err := serializer.SerializeBool(obj.IsJson); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *Script) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeScript(deserializer serde.Deserializer) (Script, error) {
	var obj Script
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserializer.DeserializeBytes(); err == nil { obj.Code = val } else { return obj, err }
	if val, err := deserialize_vector_TypeTag(deserializer); err == nil { obj.TyArgs = val } else { return obj, err }
	if val, err := deserialize_vector_bytes(deserializer); err == nil { obj.Args = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.IsJson = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeScript(input []byte) (Script, error) {
	if input == nil {
		var obj Script
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeScript(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type StakingDelta struct {
	Validator []uint8
	Metadata AccountAddress
	Delegation uint64
	Undelegation uint64
}

func (obj *StakingDelta) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serialize_vector_u8(obj.Validator, serializer); err != nil { return err }
	if err := obj.Metadata.Serialize(serializer); err != nil { return err }
	if err := serializer.SerializeU64(obj.Delegation); err != nil { return err }
	if err := serializer.SerializeU64(obj.Undelegation); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *StakingDelta) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeStakingDelta(deserializer serde.Deserializer) (StakingDelta, error) {
	var obj StakingDelta
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserialize_vector_u8(deserializer); err == nil { obj.Validator = val } else { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.Metadata = val } else { return obj, err }
	if val, err := deserializer.DeserializeU64(); err == nil { obj.Delegation = val } else { return obj, err }
	if val, err := deserializer.DeserializeU64(); err == nil { obj.Undelegation = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeStakingDelta(input []byte) (StakingDelta, error) {
	if input == nil {
		var obj StakingDelta
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeStakingDelta(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type StakingMessage interface {
	isStakingMessage()
	Serialize(serializer serde.Serializer) error
	BcsSerialize() ([]byte, error)
}

func DeserializeStakingMessage(deserializer serde.Deserializer) (StakingMessage, error) {
	index, err := deserializer.DeserializeVariantIndex()
	if err != nil { return nil, err }

	switch index {
	case 0:
		if val, err := load_StakingMessage__Delegate(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	default:
		return nil, fmt.Errorf("Unknown variant index for StakingMessage: %d", index)
	}
}

func BcsDeserializeStakingMessage(input []byte) (StakingMessage, error) {
	if input == nil {
		var obj StakingMessage
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeStakingMessage(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type StakingMessage__Delegate struct {
	DelegatorAddress AccountAddress
	ValidatorAddress string
	Amount CosmosCoin
}

func (*StakingMessage__Delegate) isStakingMessage() {}

func (obj *StakingMessage__Delegate) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(0)
	if err := obj.DelegatorAddress.Serialize(serializer); err != nil { return err }
	if err := serializer.SerializeStr(obj.ValidatorAddress); err != nil { return err }
	if err := obj.Amount.Serialize(serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *StakingMessage__Delegate) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_StakingMessage__Delegate(deserializer serde.Deserializer) (StakingMessage__Delegate, error) {
	var obj StakingMessage__Delegate
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.DelegatorAddress = val } else { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.ValidatorAddress = val } else { return obj, err }
	if val, err := DeserializeCosmosCoin(deserializer); err == nil { obj.Amount = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type StargateMessage struct {
	Sender AccountAddress
	Data []uint8
}

func (obj *StargateMessage) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := obj.Sender.Serialize(serializer); err != nil { return err }
	if err := serialize_vector_u8(obj.Data, serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *StargateMessage) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeStargateMessage(deserializer serde.Deserializer) (StargateMessage, error) {
	var obj StargateMessage
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.Sender = val } else { return obj, err }
	if val, err := deserialize_vector_u8(deserializer); err == nil { obj.Data = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeStargateMessage(input []byte) (StargateMessage, error) {
	if input == nil {
		var obj StargateMessage
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeStargateMessage(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type StructTag struct {
	Address AccountAddress
	Module Identifier
	Name Identifier
	TypeArgs []TypeTag
}

func (obj *StructTag) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := obj.Address.Serialize(serializer); err != nil { return err }
	if err := obj.Module.Serialize(serializer); err != nil { return err }
	if err := obj.Name.Serialize(serializer); err != nil { return err }
	if err := serialize_vector_TypeTag(obj.TypeArgs, serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *StructTag) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeStructTag(deserializer serde.Deserializer) (StructTag, error) {
	var obj StructTag
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.Address = val } else { return obj, err }
	if val, err := DeserializeIdentifier(deserializer); err == nil { obj.Module = val } else { return obj, err }
	if val, err := DeserializeIdentifier(deserializer); err == nil { obj.Name = val } else { return obj, err }
	if val, err := deserialize_vector_TypeTag(deserializer); err == nil { obj.TypeArgs = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeStructTag(input []byte) (StructTag, error) {
	if input == nil {
		var obj StructTag
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeStructTag(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type TableInfo struct {
	KeyType TypeTag
	ValueType TypeTag
}

func (obj *TableInfo) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := obj.KeyType.Serialize(serializer); err != nil { return err }
	if err := obj.ValueType.Serialize(serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *TableInfo) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeTableInfo(deserializer serde.Deserializer) (TableInfo, error) {
	var obj TableInfo
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeTypeTag(deserializer); err == nil { obj.KeyType = val } else { return obj, err }
	if val, err := DeserializeTypeTag(deserializer); err == nil { obj.ValueType = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeTableInfo(input []byte) (TableInfo, error) {
	if input == nil {
		var obj TableInfo
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeTableInfo(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type TypeTag interface {
	isTypeTag()
	Serialize(serializer serde.Serializer) error
	BcsSerialize() ([]byte, error)
}

func DeserializeTypeTag(deserializer serde.Deserializer) (TypeTag, error) {
	index, err := deserializer.DeserializeVariantIndex()
	if err != nil { return nil, err }

	switch index {
	case 0:
		if val, err := load_TypeTag__Bool(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 1:
		if val, err := load_TypeTag__U8(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 2:
		if val, err := load_TypeTag__U64(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 3:
		if val, err := load_TypeTag__U128(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 4:
		if val, err := load_TypeTag__Address(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 5:
		if val, err := load_TypeTag__Signer(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 6:
		if val, err := load_TypeTag__Vector(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 7:
		if val, err := load_TypeTag__Struct(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 8:
		if val, err := load_TypeTag__U16(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 9:
		if val, err := load_TypeTag__U32(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	case 10:
		if val, err := load_TypeTag__U256(deserializer); err == nil {
			return &val, nil
		} else {
			return nil, err
		}

	default:
		return nil, fmt.Errorf("Unknown variant index for TypeTag: %d", index)
	}
}

func BcsDeserializeTypeTag(input []byte) (TypeTag, error) {
	if input == nil {
		var obj TypeTag
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeTypeTag(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type TypeTag__Bool struct {
}

func (*TypeTag__Bool) isTypeTag() {}

func (obj *TypeTag__Bool) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(0)
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *TypeTag__Bool) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_TypeTag__Bool(deserializer serde.Deserializer) (TypeTag__Bool, error) {
	var obj TypeTag__Bool
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type TypeTag__U8 struct {
}

func (*TypeTag__U8) isTypeTag() {}

func (obj *TypeTag__U8) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(1)
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *TypeTag__U8) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_TypeTag__U8(deserializer serde.Deserializer) (TypeTag__U8, error) {
	var obj TypeTag__U8
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type TypeTag__U64 struct {
}

func (*TypeTag__U64) isTypeTag() {}

func (obj *TypeTag__U64) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(2)
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *TypeTag__U64) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_TypeTag__U64(deserializer serde.Deserializer) (TypeTag__U64, error) {
	var obj TypeTag__U64
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type TypeTag__U128 struct {
}

func (*TypeTag__U128) isTypeTag() {}

func (obj *TypeTag__U128) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(3)
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *TypeTag__U128) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_TypeTag__U128(deserializer serde.Deserializer) (TypeTag__U128, error) {
	var obj TypeTag__U128
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type TypeTag__Address struct {
}

func (*TypeTag__Address) isTypeTag() {}

func (obj *TypeTag__Address) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(4)
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *TypeTag__Address) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_TypeTag__Address(deserializer serde.Deserializer) (TypeTag__Address, error) {
	var obj TypeTag__Address
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type TypeTag__Signer struct {
}

func (*TypeTag__Signer) isTypeTag() {}

func (obj *TypeTag__Signer) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(5)
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *TypeTag__Signer) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_TypeTag__Signer(deserializer serde.Deserializer) (TypeTag__Signer, error) {
	var obj TypeTag__Signer
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type TypeTag__Vector struct {
	Value TypeTag
}

func (*TypeTag__Vector) isTypeTag() {}

func (obj *TypeTag__Vector) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(6)
	if err := obj.Value.Serialize(serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *TypeTag__Vector) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_TypeTag__Vector(deserializer serde.Deserializer) (TypeTag__Vector, error) {
	var obj TypeTag__Vector
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeTypeTag(deserializer); err == nil { obj.Value = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type TypeTag__Struct struct {
	Value StructTag
}

func (*TypeTag__Struct) isTypeTag() {}

func (obj *TypeTag__Struct) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(7)
	if err := obj.Value.Serialize(serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *TypeTag__Struct) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_TypeTag__Struct(deserializer serde.Deserializer) (TypeTag__Struct, error) {
	var obj TypeTag__Struct
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeStructTag(deserializer); err == nil { obj.Value = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type TypeTag__U16 struct {
}

func (*TypeTag__U16) isTypeTag() {}

func (obj *TypeTag__U16) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(8)
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *TypeTag__U16) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_TypeTag__U16(deserializer serde.Deserializer) (TypeTag__U16, error) {
	var obj TypeTag__U16
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type TypeTag__U32 struct {
}

func (*TypeTag__U32) isTypeTag() {}

func (obj *TypeTag__U32) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(9)
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *TypeTag__U32) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_TypeTag__U32(deserializer serde.Deserializer) (TypeTag__U32, error) {
	var obj TypeTag__U32
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type TypeTag__U256 struct {
}

func (*TypeTag__U256) isTypeTag() {}

func (obj *TypeTag__U256) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	serializer.SerializeVariantIndex(10)
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *TypeTag__U256) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func load_TypeTag__U256(deserializer serde.Deserializer) (TypeTag__U256, error) {
	var obj TypeTag__U256
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

type ViewFunction struct {
	Module ModuleId
	Function Identifier
	TyArgs []TypeTag
	Args [][]byte
	IsJson bool
}

func (obj *ViewFunction) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := obj.Module.Serialize(serializer); err != nil { return err }
	if err := obj.Function.Serialize(serializer); err != nil { return err }
	if err := serialize_vector_TypeTag(obj.TyArgs, serializer); err != nil { return err }
	if err := serialize_vector_bytes(obj.Args, serializer); err != nil { return err }
	if err := serializer.SerializeBool(obj.IsJson); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *ViewFunction) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeViewFunction(deserializer serde.Deserializer) (ViewFunction, error) {
	var obj ViewFunction
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := DeserializeModuleId(deserializer); err == nil { obj.Module = val } else { return obj, err }
	if val, err := DeserializeIdentifier(deserializer); err == nil { obj.Function = val } else { return obj, err }
	if val, err := deserialize_vector_TypeTag(deserializer); err == nil { obj.TyArgs = val } else { return obj, err }
	if val, err := deserialize_vector_bytes(deserializer); err == nil { obj.Args = val } else { return obj, err }
	if val, err := deserializer.DeserializeBool(); err == nil { obj.IsJson = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeViewFunction(input []byte) (ViewFunction, error) {
	if input == nil {
		var obj ViewFunction
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeViewFunction(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}

type ViewOutput struct {
	Ret string
	Events []JsonEvent
}

func (obj *ViewOutput) Serialize(serializer serde.Serializer) error {
	if err := serializer.IncreaseContainerDepth(); err != nil { return err }
	if err := serializer.SerializeStr(obj.Ret); err != nil { return err }
	if err := serialize_vector_JsonEvent(obj.Events, serializer); err != nil { return err }
	serializer.DecreaseContainerDepth()
	return nil
}

func (obj *ViewOutput) BcsSerialize() ([]byte, error) {
	if obj == nil {
		return nil, fmt.Errorf("Cannot serialize null object")
	}
	serializer := bcs.NewSerializer();
	if err := obj.Serialize(serializer); err != nil { return nil, err }
	return serializer.GetBytes(), nil
}

func DeserializeViewOutput(deserializer serde.Deserializer) (ViewOutput, error) {
	var obj ViewOutput
	if err := deserializer.IncreaseContainerDepth(); err != nil { return obj, err }
	if val, err := deserializer.DeserializeStr(); err == nil { obj.Ret = val } else { return obj, err }
	if val, err := deserialize_vector_JsonEvent(deserializer); err == nil { obj.Events = val } else { return obj, err }
	deserializer.DecreaseContainerDepth()
	return obj, nil
}

func BcsDeserializeViewOutput(input []byte) (ViewOutput, error) {
	if input == nil {
		var obj ViewOutput
		return obj, fmt.Errorf("Cannot deserialize null array")
	}
	deserializer := bcs.NewDeserializer(input);
	obj, err := DeserializeViewOutput(deserializer)
	if err == nil && deserializer.GetBufferOffset() < uint64(len(input)) {
		return obj, fmt.Errorf("Some input bytes were not read")
	}
	return obj, err
}
func serialize_array32_u8_array(value [32]uint8, serializer serde.Serializer) error {
	for _, item := range(value) {
		if err := serializer.SerializeU8(item); err != nil { return err }
	}
	return nil
}

func deserialize_array32_u8_array(deserializer serde.Deserializer) ([32]uint8, error) {
	var obj [32]uint8
	for i := range(obj) {
		if val, err := deserializer.DeserializeU8(); err == nil { obj[i] = val } else { return obj, err }
	}
	return obj, nil
}

func serialize_option_str(value *string, serializer serde.Serializer) error {
	if value != nil {
		if err := serializer.SerializeOptionTag(true); err != nil { return err }
		if err := serializer.SerializeStr((*value)); err != nil { return err }
	} else {
		if err := serializer.SerializeOptionTag(false); err != nil { return err }
	}
	return nil
}

func deserialize_option_str(deserializer serde.Deserializer) (*string, error) {
	tag, err := deserializer.DeserializeOptionTag()
	if err != nil { return nil, err }
	if tag {
		value := new(string)
		if val, err := deserializer.DeserializeStr(); err == nil { *value = val } else { return nil, err }
	        return value, nil
	} else {
		return nil, nil
	}
}

func serialize_tuple2_str_AccountAddress(value struct {Field0 string; Field1 AccountAddress}, serializer serde.Serializer) error {
	if err := serializer.SerializeStr(value.Field0); err != nil { return err }
	if err := value.Field1.Serialize(serializer); err != nil { return err }
	return nil
}

func deserialize_tuple2_str_AccountAddress(deserializer serde.Deserializer) (struct {Field0 string; Field1 AccountAddress}, error) {
	var obj struct {Field0 string; Field1 AccountAddress}
	if val, err := deserializer.DeserializeStr(); err == nil { obj.Field0 = val } else { return obj, err }
	if val, err := DeserializeAccountAddress(deserializer); err == nil { obj.Field1 = val } else { return obj, err }
	return obj, nil
}

func serialize_vector_Account(value []Account, serializer serde.Serializer) error {
	if err := serializer.SerializeLen(uint64(len(value))); err != nil { return err }
	for _, item := range(value) {
		if err := item.Serialize(serializer); err != nil { return err }
	}
	return nil
}

func deserialize_vector_Account(deserializer serde.Deserializer) ([]Account, error) {
	length, err := deserializer.DeserializeLen()
	if err != nil { return nil, err }
	obj := make([]Account, length)
	for i := range(obj) {
		if val, err := DeserializeAccount(deserializer); err == nil { obj[i] = val } else { return nil, err }
	}
	return obj, nil
}

func serialize_vector_CosmosMessage(value []CosmosMessage, serializer serde.Serializer) error {
	if err := serializer.SerializeLen(uint64(len(value))); err != nil { return err }
	for _, item := range(value) {
		if err := item.Serialize(serializer); err != nil { return err }
	}
	return nil
}

func deserialize_vector_CosmosMessage(deserializer serde.Deserializer) ([]CosmosMessage, error) {
	length, err := deserializer.DeserializeLen()
	if err != nil { return nil, err }
	obj := make([]CosmosMessage, length)
	for i := range(obj) {
		if val, err := DeserializeCosmosMessage(deserializer); err == nil { obj[i] = val } else { return nil, err }
	}
	return obj, nil
}

func serialize_vector_GasUsage(value []GasUsage, serializer serde.Serializer) error {
	if err := serializer.SerializeLen(uint64(len(value))); err != nil { return err }
	for _, item := range(value) {
		if err := item.Serialize(serializer); err != nil { return err }
	}
	return nil
}

func deserialize_vector_GasUsage(deserializer serde.Deserializer) ([]GasUsage, error) {
	length, err := deserializer.DeserializeLen()
	if err != nil { return nil, err }
	obj := make([]GasUsage, length)
	for i := range(obj) {
		if val, err := DeserializeGasUsage(deserializer); err == nil { obj[i] = val } else { return nil, err }
	}
	return obj, nil
}

func serialize_vector_JsonEvent(value []JsonEvent, serializer serde.Serializer) error {
	if err := serializer.SerializeLen(uint64(len(value))); err != nil { return err }
	for _, item := range(value) {
		if err := item.Serialize(serializer); err != nil { return err }
	}
	return nil
}

func deserialize_vector_JsonEvent(deserializer serde.Deserializer) ([]JsonEvent, error) {
	length, err := deserializer.DeserializeLen()
	if err != nil { return nil, err }
	obj := make([]JsonEvent, length)
	for i := range(obj) {
		if val, err := DeserializeJsonEvent(deserializer); err == nil { obj[i] = val } else { return nil, err }
	}
	return obj, nil
}

func serialize_vector_Module(value []Module, serializer serde.Serializer) error {
	if err := serializer.SerializeLen(uint64(len(value))); err != nil { return err }
	for _, item := range(value) {
		if err := item.Serialize(serializer); err != nil { return err }
	}
	return nil
}

func deserialize_vector_Module(deserializer serde.Deserializer) ([]Module, error) {
	length, err := deserializer.DeserializeLen()
	if err != nil { return nil, err }
	obj := make([]Module, length)
	for i := range(obj) {
		if val, err := DeserializeModule(deserializer); err == nil { obj[i] = val } else { return nil, err }
	}
	return obj, nil
}

func serialize_vector_StakingDelta(value []StakingDelta, serializer serde.Serializer) error {
	if err := serializer.SerializeLen(uint64(len(value))); err != nil { return err }
	for _, item := range(value) {
		if err := item.Serialize(serializer); err != nil { return err }
	}
	return nil
}

func deserialize_vector_StakingDelta(deserializer serde.Deserializer) ([]StakingDelta, error) {
	length, err := deserializer.DeserializeLen()
	if err != nil { return nil, err }
	obj := make([]StakingDelta, length)
	for i := range(obj) {
		if val, err := DeserializeStakingDelta(deserializer); err == nil { obj[i] = val } else { return nil, err }
	}
	return obj, nil
}

func serialize_vector_TypeTag(value []TypeTag, serializer serde.Serializer) error {
	if err := serializer.SerializeLen(uint64(len(value))); err != nil { return err }
	for _, item := range(value) {
		if err := item.Serialize(serializer); err != nil { return err }
	}
	return nil
}

func deserialize_vector_TypeTag(deserializer serde.Deserializer) ([]TypeTag, error) {
	length, err := deserializer.DeserializeLen()
	if err != nil { return nil, err }
	obj := make([]TypeTag, length)
	for i := range(obj) {
		if val, err := DeserializeTypeTag(deserializer); err == nil { obj[i] = val } else { return nil, err }
	}
	return obj, nil
}

func serialize_vector_bytes(value [][]byte, serializer serde.Serializer) error {
	if err := serializer.SerializeLen(uint64(len(value))); err != nil { return err }
	for _, item := range(value) {
		if err := serializer.SerializeBytes(item); err != nil { return err }
	}
	return nil
}

func deserialize_vector_bytes(deserializer serde.Deserializer) ([][]byte, error) {
	length, err := deserializer.DeserializeLen()
	if err != nil { return nil, err }
	obj := make([][]byte, length)
	for i := range(obj) {
		if val, err := deserializer.DeserializeBytes(); err == nil { obj[i] = val } else { return nil, err }
	}
	return obj, nil
}

func serialize_vector_str(value []string, serializer serde.Serializer) error {
	if err := serializer.SerializeLen(uint64(len(value))); err != nil { return err }
	for _, item := range(value) {
		if err := serializer.SerializeStr(item); err != nil { return err }
	}
	return nil
}

func deserialize_vector_str(deserializer serde.Deserializer) ([]string, error) {
	length, err := deserializer.DeserializeLen()
	if err != nil { return nil, err }
	obj := make([]string, length)
	for i := range(obj) {
		if val, err := deserializer.DeserializeStr(); err == nil { obj[i] = val } else { return nil, err }
	}
	return obj, nil
}

func serialize_vector_tuple2_str_AccountAddress(value []struct {Field0 string; Field1 AccountAddress}, serializer serde.Serializer) error {
	if err := serializer.SerializeLen(uint64(len(value))); err != nil { return err }
	for _, item := range(value) {
		if err := serialize_tuple2_str_AccountAddress(item, serializer); err != nil { return err }
	}
	return nil
}

func deserialize_vector_tuple2_str_AccountAddress(deserializer serde.Deserializer) ([]struct {Field0 string; Field1 AccountAddress}, error) {
	length, err := deserializer.DeserializeLen()
	if err != nil { return nil, err }
	obj := make([]struct {Field0 string; Field1 AccountAddress}, length)
	for i := range(obj) {
		if val, err := deserialize_tuple2_str_AccountAddress(deserializer); err == nil { obj[i] = val } else { return nil, err }
	}
	return obj, nil
}

func serialize_vector_u8(value []uint8, serializer serde.Serializer) error {
	if err := serializer.SerializeLen(uint64(len(value))); err != nil { return err }
	for _, item := range(value) {
		if err := serializer.SerializeU8(item); err != nil { return err }
	}
	return nil
}

func deserialize_vector_u8(deserializer serde.Deserializer) ([]uint8, error) {
	length, err := deserializer.DeserializeLen()
	if err != nil { return nil, err }
	obj := make([]uint8, length)
	for i := range(obj) {
		if val, err := deserializer.DeserializeU8(); err == nil { obj[i] = val } else { return nil, err }
	}
	return obj, nil
}

func serialize_vector_vector_u8(value [][]uint8, serializer serde.Serializer) error {
	if err := serializer.SerializeLen(uint64(len(value))); err != nil { return err }
	for _, item := range(value) {
		if err := serialize_vector_u8(item, serializer); err != nil { return err }
	}
	return nil
}

func deserialize_vector_vector_u8(deserializer serde.Deserializer) ([][]uint8, error) {
	length, err := deserializer.DeserializeLen()
	if err != nil { return nil, err }
	obj := make([][]uint8, length)
	for i := range(obj) {
		if val, err := deserialize_vector_u8(deserializer); err == nil { obj[i] = val } else { return nil, err }
	}
	return obj, nil
}

